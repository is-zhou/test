import{_ as e,c as p,o as t,af as r}from"./chunks/framework.BnCEywTn.js";const c=JSON.parse('{"title":"组件化设计思想有深入理解","description":"","frontmatter":{},"headers":[],"relativePath":"summarize/s4.md","filePath":"summarize/s4.md"}'),s={name:"summarize/s4.md"};function o(n,a,i,_,l,m){return t(),p("div",null,[...a[0]||(a[0]=[r('<h1 id="组件化设计思想有深入理解" tabindex="-1">组件化设计思想有深入理解 <a class="header-anchor" href="#组件化设计思想有深入理解" aria-label="Permalink to “组件化设计思想有深入理解”">​</a></h1><p>组件化是将复杂系统拆分为可复用、可组合、低耦合的独立单元（组件），通过明确的输入输出契约实现系统的高内聚低耦合。</p><h2 id="组件化的核心设计原则" tabindex="-1">组件化的核心设计原则 <a class="header-anchor" href="#组件化的核心设计原则" aria-label="Permalink to “组件化的核心设计原则”">​</a></h2><p>1️⃣ 单一职责原则（SRP）</p><p>每个组件只做一件事，关注点清晰。 → 避免“大杂烩组件”，方便维护和替换。</p><p>2️⃣ 高内聚、低耦合</p><p>组件内部逻辑紧密相关，对外依赖尽量少。 → 通信通过 Props / Emits / Slots / Context 等标准接口完成。</p><p>3️⃣ 明确的边界与契约</p><p>组件对外提供稳定的 API（属性、事件、插槽），对内隐藏实现细节。 → 像设计一个“模块化接口”，而不是随意暴露内部逻辑。</p><p>4️⃣ 可组合性（Composable）</p><p>小组件可以自由组合成更复杂的结构。 → 体现“组合优于继承”的思想。</p><p>5️⃣ 可复用与可扩展</p><p>组件应当在不同场景下复用，同时允许扩展（例如通过 Props、Slots、Render Props、Hooks 等机制）</p>',13)])])}const h=e(s,[["render",o]]);export{c as __pageData,h as default};
