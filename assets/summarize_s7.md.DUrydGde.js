import{_ as d,c as i,o as e,af as s}from"./chunks/framework.W5ZyBR1w.js";const p=JSON.parse('{"title":"Git 常用命令与技巧","description":"","frontmatter":{},"headers":[],"relativePath":"summarize/s7.md","filePath":"summarize/s7.md"}'),a={name:"summarize/s7.md"};function r(h,t,o,l,c,n){return e(),i("div",null,[...t[0]||(t[0]=[s(`<h1 id="git-常用命令与技巧" tabindex="-1">Git 常用命令与技巧 <a class="header-anchor" href="#git-常用命令与技巧" aria-label="Permalink to “Git 常用命令与技巧”">​</a></h1><p>下面是一份高质量、实战导向的 Git 常用命令与技巧清单，分为基础、分支协作、版本管理、回滚修复、远程操作、配置与进阶技巧几大类。 这些命令和技巧是前端开发中最常用、最能体现熟练度的内容（不仅适合日常，也适合在面试时展示“熟练使用 Git 进行多人协作和版本管理”）。</p><p>🧩 一、基础操作</p><table tabindex="0"><thead><tr><th>场景</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>初始化仓库</td><td><code>git init</code></td><td>创建一个新的 Git 仓库</td></tr><tr><td>克隆项目</td><td><code>git clone &lt;url&gt;</code></td><td>克隆远程仓库到本地</td></tr><tr><td>查看状态</td><td><code>git status</code></td><td>查看当前变更文件、暂存区状态</td></tr><tr><td>添加到暂存区</td><td><code>git add .</code></td><td>将所有修改添加到暂存区</td></tr><tr><td>提交更改</td><td><code>git commit -m &quot;feat: add xxx&quot;</code></td><td>提交代码并添加描述信息</td></tr><tr><td>查看提交日志</td><td><code>git log --oneline --graph --decorate</code></td><td>以图形化方式查看提交记录</td></tr><tr><td>查看文件变更</td><td><code>git diff</code></td><td>查看未暂存的代码差异</td></tr></tbody></table><p>🌿 二、分支操作（Branch Workflow）</p><table tabindex="0"><thead><tr><th>场景</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>创建分支</td><td><code>git branch feature/login</code></td><td>创建新分支</td></tr><tr><td>切换分支</td><td><code>git checkout feature/login</code><br>或 <code>git switch feature/login</code></td><td>切换到该分支</td></tr><tr><td>创建并切换</td><td><code>git checkout -b feature/login</code></td><td>一步创建并切换</td></tr><tr><td>查看分支</td><td><code>git branch</code></td><td>查看本地分支</td></tr><tr><td>删除分支</td><td><code>git branch -d feature/login</code></td><td>删除本地分支</td></tr><tr><td>合并分支</td><td><code>git merge feature/login</code></td><td>将 feature 分支合并到当前分支</td></tr><tr><td>变基操作</td><td><code>git rebase main</code></td><td>让当前分支基于最新主干重新构建提交历史</td></tr><tr><td>解决冲突</td><td>编辑冲突文件 → <code>git add .</code> → <code>git rebase --continue</code></td><td>手动处理冲突后继续</td></tr></tbody></table><p>🧭 三、版本管理与回滚（Reset / Revert）</p><table tabindex="0"><thead><tr><th>场景</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>撤销工作区修改</td><td><code>git checkout -- &lt;file&gt;</code></td><td>恢复到上一次提交状态</td></tr><tr><td>撤销暂存区修改</td><td><code>git reset HEAD &lt;file&gt;</code></td><td>从暂存区移除但保留文件修改</td></tr><tr><td>回退到某个提交</td><td><code>git reset --hard &lt;commit-id&gt;</code></td><td>彻底回退（本地文件也恢复）</td></tr><tr><td>保留修改的回退</td><td><code>git reset --soft &lt;commit-id&gt;</code></td><td>回退提交但保留修改</td></tr><tr><td>撤销某次提交（安全）</td><td><code>git revert &lt;commit-id&gt;</code></td><td>新建一次反向提交，不影响历史</td></tr><tr><td>查看历史记录</td><td><code>git log</code> / <code>git reflog</code></td><td><code>reflog</code> 可看到所有操作历史，包括被 reset 的</td></tr></tbody></table><p>🔹 小技巧：</p><p>当你执行错 git reset --hard 时，可以用 git reflog 找回被删提交的 ID。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reflog</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">old-commit-i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>🌐 四、远程仓库操作（Remote）</p><table tabindex="0"><thead><tr><th>场景</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>添加远程仓库</td><td><code>git remote add origin &lt;url&gt;</code></td><td>绑定远程仓库</td></tr><tr><td>查看远程仓库</td><td><code>git remote -v</code></td><td>查看所有远程地址</td></tr><tr><td>推送代码</td><td><code>git push origin main</code></td><td>推送本地代码到远程分支</td></tr><tr><td>拉取更新</td><td><code>git pull origin main</code></td><td>拉取并合并远程代码</td></tr><tr><td>同步远程更新（安全）</td><td><code>git fetch origin main</code></td><td>仅拉取但不合并，可安全查看差异</td></tr><tr><td>推送所有标签</td><td><code>git push origin --tags</code></td><td>推送本地所有标签到远程</td></tr></tbody></table><p>🧱 五、标签与版本管理（Tags）</p><table tabindex="0"><thead><tr><th>场景</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>创建标签</td><td><code>git tag v1.0.0</code></td><td>创建轻量标签</td></tr><tr><td>创建带信息的标签</td><td><code>git tag -a v1.0.0 -m &quot;release v1.0.0&quot;</code></td><td>创建带说明的标签</td></tr><tr><td>查看标签</td><td><code>git tag</code></td><td>查看标签列表</td></tr><tr><td>推送标签</td><td><code>git push origin v1.0.0</code></td><td>推送某个标签到远程</td></tr><tr><td>删除标签</td><td><code>git tag -d v1.0.0</code></td><td>删除本地标签</td></tr></tbody></table><p>⚙️ 六、配置与常用技巧</p><table tabindex="0"><thead><tr><th>技巧</th><th>命令 / 思路</th><th>说明</th></tr></thead><tbody><tr><td>设置全局用户名</td><td><code>git config --global user.name &quot;Leisurely Zhou&quot;</code></td><td>全局配置用户信息</td></tr><tr><td>设置邮箱</td><td><code>git config --global user.email &quot;xxx@gmail.com&quot;</code></td><td>邮箱配置</td></tr><tr><td>为不同盘符设置不同用户</td><td>使用 <code>.gitconfig</code> includeIf 分区配置</td><td>（你之前的方案 👍）</td></tr><tr><td>查看全局配置</td><td><code>git config --list --global</code></td><td>检查当前 Git 全局配置</td></tr><tr><td>快速查看最近 5 次提交</td><td><code>git log -5 --oneline</code></td><td>简洁输出</td></tr><tr><td>撤销最后一次提交但保留修改</td><td><code>git reset --soft HEAD~1</code></td><td>常用于修改 commit 信息</td></tr><tr><td>修改最近一次提交信息</td><td><code>git commit --amend -m &quot;fix: correct commit message&quot;</code></td><td>不改变内容只更新说明</td></tr><tr><td>忽略未追踪文件</td><td><code>git clean -fd</code></td><td>清理未跟踪文件（慎用！）</td></tr></tbody></table><p>🧠 七、进阶协作技巧</p><ol><li>交互式 rebase（整理提交历史）</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD~5</span></span></code></pre></div><p>可合并多条 commit（squash）、修改说明或删除无效提交。</p><p>面试亮点点：用于“优化提交历史、保证主干清晰”。</p><ol start="2"><li>Cherry-pick（挑选特定提交）</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cherry-pick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">commit-i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>把指定提交应用到当前分支。</p><p>常用于 hotfix：从主分支挑选修复代码到生产分支。</p><ol start="3"><li>Stash 暂存改动</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;临时修改&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pop</span></span></code></pre></div><p>临时保存未提交的工作进度，适合切分支前使用。</p><p>🧾 八、可写入简历的技巧描述（工程化层面）</p><p>熟练使用 Git 进行团队协作与版本管理，掌握分支管理、rebase、cherry-pick、stash 等进阶命令； 能够独立解决代码冲突、回滚错误提交，并通过 Git Hooks + Husky 实现提交规范化（如自动 lint 与格式化）。</p>`,31)])])}const k=d(a,[["render",r]]);export{p as __pageData,k as default};
